#!/bin/bash

# ðŸ“¦ Script para PARTE 4A: Auditoria de DependÃªncias
# Subparte 4.1 do PLANO_ATUALIZACOES.md

set -e

# Cores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

log "ðŸ”„ Iniciando PARTE 4A: Auditoria de DependÃªncias"

# 4.1.1 Analisar dependÃªncias crÃ­ticas
log "4.1.1 - Analisando dependÃªncias crÃ­ticas..."

# Verificar dependÃªncias atuais
log "DependÃªncias atuais:"
go list -m all | wc -l

# Listar dependÃªncias principais
log "DependÃªncias principais:"
go list -m all | grep -E "(libp2p|badger|crypto|auth)" || true

# 4.1.2 Resolver conflitos de versÃ£o
log "4.1.2 - Resolvendo conflitos de versÃ£o..."

# Verificar se Badger v3 estÃ¡ presente
if go list -m all | grep -q "badger/v3"; then
    log "Removendo Badger v3..."
    go mod edit -droprequire github.com/dgraph-io/badger/v3
    log "âœ… Badger v3 removido"
else
    log "Badger v3 nÃ£o encontrado"
fi

# Verificar mÃºltiplas versÃµes de libp2p
log "Verificando versÃµes de libp2p..."
go list -m all | grep libp2p || true

# 4.1.3 Limpar dependÃªncias
log "4.1.3 - Limpando dependÃªncias..."
go mod tidy

# Verificar dependÃªncias apÃ³s limpeza
log "DependÃªncias apÃ³s limpeza:"
go list -m all | wc -l

# Criar relatÃ³rio de dependÃªncias
log "Criando relatÃ³rio de dependÃªncias..."
cat > DEPENDENCIES_REPORT.md << 'EOF'
# ðŸ“¦ RelatÃ³rio de DependÃªncias ORDM

## DependÃªncias CrÃ­ticas (Manter)

### Rede P2P
- `github.com/libp2p/go-libp2p` - Rede peer-to-peer
- `github.com/libp2p/go-libp2p-pubsub` - Sistema de pub/sub

### Database
- `github.com/dgraph-io/badger/v4` - Database key-value

### Criptografia
- `golang.org/x/crypto` - FunÃ§Ãµes criptogrÃ¡ficas
- `github.com/tyler-smith/go-bip39` - GeraÃ§Ã£o de mnemÃ´nicos

### AutenticaÃ§Ã£o
- `github.com/golang-jwt/jwt` - Tokens JWT

## DependÃªncias Opcionais (Avaliar)

### Monitoramento
- `github.com/prometheus/client_golang` - MÃ©tricas Prometheus

### Logging
- `go.uber.org/zap` - Logger estruturado

### Testes
- `github.com/stretchr/testify` - Framework de testes

## DependÃªncias Removidas

### Conflitos Resolvidos
- `github.com/dgraph-io/badger/v3` - SubstituÃ­do por v4

## RecomendaÃ§Ãµes

1. **Manter apenas dependÃªncias essenciais**
2. **Usar versÃµes estÃ¡veis**
3. **Auditar regularmente**
4. **Implementar vendoring para produÃ§Ã£o**

## MÃ©tricas

- **Total de dependÃªncias**: [serÃ¡ preenchido automaticamente]
- **DependÃªncias diretas**: [serÃ¡ preenchido automaticamente]
- **DependÃªncias transitivas**: [serÃ¡ preenchido automaticamente]
EOF

# Contar dependÃªncias
TOTAL_DEPS=$(go list -m all | wc -l)
DIRECT_DEPS=$(go list -m -u all | grep -v "indirect" | wc -l)
TRANSITIVE_DEPS=$((TOTAL_DEPS - DIRECT_DEPS))

# Atualizar relatÃ³rio com mÃ©tricas
sed -i.bak "s/\[serÃ¡ preenchido automaticamente\]/$TOTAL_DEPS/g" DEPENDENCIES_REPORT.md
sed -i.bak "s/\[serÃ¡ preenchido automaticamente\]/$DIRECT_DEPS/g" DEPENDENCIES_REPORT.md
sed -i.bak "s/\[serÃ¡ preenchido automaticamente\]/$TRANSITIVE_DEPS/g" DEPENDENCIES_REPORT.md

log "âœ… PARTE 4A: Auditoria de DependÃªncias concluÃ­da!"
log "ðŸ“‹ Arquivos criados:"
log "   - DEPENDENCIES_REPORT.md"
log "ðŸ“Š MÃ©tricas:"
log "   - Total de dependÃªncias: $TOTAL_DEPS"
log "   - DependÃªncias diretas: $DIRECT_DEPS"
log "   - DependÃªncias transitivas: $TRANSITIVE_DEPS"

